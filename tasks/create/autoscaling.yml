---
- name: "Create AMI | {{ system_role }}"
  ec2_ami:
    state: present
    region: "{{ region }}"
    name: "{{ project }}-{{ system_role }}-{{ timestamp }}"
    instance_id: "{{ instances[system_role] }}"
    wait: yes
  register: ami
  when: system_role in autoscale_roles

- name: "Launch Configuration | {{ system_role }}"
  ec2_lc:
    state: present
    region: "{{ region }}"
    assign_public_ip: "{% if system_role in roles_needing_public_ip %}yes{% else %}no{% endif %}"
    name: "{{ project }}-{{ system_role }}-{{ timestamp }}"
    instance_type: "{{ instance_type[system_role] }}"
    image_id: "{{ ami.image_id }}"
    security_groups: "{{ security_group_id['managed'] }},{{ security_group_id[system_role] }}"
    # spot_price: "{{ instance_bid }}"
    instance_profile_name: autonomous
    user_data: "{{ forge_userdata | b64decode }}"
  when: system_role in autoscale_roles

- name: "AutoScaling Group | {{ system_role }}"
  ec2_asg:
    state: present
    region: "{{ region }}"
    availability_zones: "{{ availability_zones | join(',') }}"
    launch_config_name: "{{ project }}-{{ system_role }}-{{ timestamp }}"
    load_balancers: "{% if has_load_balancer %}{{ project }}-{{ system_role }}{% else %}{{ [] }}{% endif %}"
    name: "{{ project }}-{{ system_role }}"
    min_size: 3
    max_size: 6
    desired_capacity: 3
    vpc_zone_identifier: "{{ vpc.subnets | selectattr('resource_tags.Role', 'equalto', system_role) | join(',', attribute='id') }}"
    tags:
      - Environment: "{{ environment_tier }}"
      - Project:     "{{ project }}"
      - Role:        "{{ system_role }}-autoscaled"
      - Name:        "{{ system_role }}.{{ project }}-{{ environment_tier }}"
      - ForgeRegion: "{{ forge_region }}"
      - ForgeBucket: "{{ forge_bucket }}"

  when: system_role in autoscale_roles
